"use strict";
;window.keks = {};
(function() {
    const ESC_KEYCODE = 27;
    const ENTER_KEYCODE = 13;

    // рандомайзер значений в заданном диапазоне 

    function getRandom(min, max) {
        min -= 0.5;
        max += 0.5;
        return Math.round(Math.random() * (max - min) + min);
    }

    //функция рандомной сортировки

    function randomSort() {
        return Math.random() - 0.5;
    }
    // функция сравнения нажатой клавиши с Esc; @keyEvt = event;

    function onEscPress(keyEvt) {
        return (keyEvt.keyCode === ESC_KEYCODE);
    }

    // функция сравнения нажатой клавиши с Enter; @keyEvt = event;

    function onEnterPress(keyEvt) {
        return (keyEvt.keyCode === ENTER_KEYCODE);
    }

    return window.keks.commons = {
        randomSort,
        getRandom,
        onEnterPress,
        onEscPress
    };

})();
"use strict";
(function(){
    let uploadForm = document.querySelector('.upload-form');
    let uploadImageField = uploadForm.querySelector('#upload-file');
    let filtersForm = document.querySelector('.filters');
    let uploadOverlay = uploadForm.querySelector('.upload-overlay');
    let commentsArea = uploadForm.querySelector('.upload-form-description');
    let resizeContainer = uploadForm.querySelector('.upload-resize-controls');
    let decResizeButton = uploadForm.querySelector('.upload-resize-controls-button-dec');
    let incResizeButton = uploadForm.querySelector('.upload-resize-controls-button-inc');
    let resizeValue = uploadForm.querySelector('.upload-resize-controls-value');
    let previewImage = uploadForm.querySelector('.effect-image-preview');
    let effectControls = uploadForm.querySelector('.upload-effect-controls');
    const RESIZE_STEP = 25;
    const RESIZE_MIN = 25;
    const RESIZE_MAX = 100;

    uploadImageField.addEventListener('change', showUploadForm);
   
    // функция показа настроек загружаемого изображения; @evt = event

    function showUploadForm(evt) {
       uploadOverlay.classList.remove('hidden');
       let closeUploadOverlay = uploadOverlay.querySelector('.upload-form-cancel');
       closeUploadOverlay.addEventListener('click', closeUploadForm);
       document.addEventListener('keydown', cancelUploadOnEsc);
    }

    // функция закрытия настроек загружаемого изображения; @evt = event

    function closeUploadForm(evt) {
        evt.preventDefault();
        uploadOverlay.classList.add('hidden');
        closeUploadOverlay.removeEventListener('click', closeUploadForm);
        document.removeEventListener('keydown', cancelUploadOnEsc);
    }

    // функция закрытия настроек загружаемого изображения клавишей Esc; @keyEvt = event

    function cancelUploadOnEsc(keyEvt) {
        if (window.keks.commons.onEscPress(keyEvt) && (commentsArea !== document.activeElement)) {
            keyEvt.preventDefault();
            closeUploadForm(keyEvt);
        }
    }

    commentsArea.setAttribute('maxlength', 140);
    resizeValue.value = `${RESIZE_MAX}%`;
    let resizeImageValue = parseInt(resizeValue.value, 10); 
    decResizeButton.addEventListener('click', decPictureSize);
    incResizeButton.addEventListener('click', incPictureSize);

    // функция уменьшения масштаба загружаемого изображения; @evt = event

    function decPictureSize(evt) {
        evt.preventDefault();
        resizeImageValue > RESIZE_MIN ? resizeImageValue -= RESIZE_STEP : resizeImageValue;
        if (resizeImageValue < RESIZE_MIN) resizeImageValue = RESIZE_MIN;
        resizeValue.value = `${resizeImageValue}%`;
        previewImage.style.transform = `scale(${resizeImageValue / 100})`;
    }

     // функция увеличения масштаба загружаемого изображения; @evt = event

    function incPictureSize(evt) {
        evt.preventDefault();
        resizeImageValue < RESIZE_MAX ? resizeImageValue += RESIZE_STEP : resizeImageValue;
        if (resizeImageValue > RESIZE_MAX) resizeImageValue = RESIZE_MAX;
        resizeValue.value = `${resizeImageValue}%`;
        previewImage.style.transform = `scale(${resizeImageValue / 100})`;
    }

    effectControls.addEventListener('change', setImageFilter);

    // функция настройки фильтра загружаемого изображения; @evt = event

    function setImageFilter(evt) {
        let filterValue = 75;
        let filter = evt.target.value;
        let filters = {
            none: `none`,
            chrome : `grayscale(${filterValue}%)`,
            sepia : `sepia(${filterValue}%)`,
            marvin : `invert(${filterValue}%)`,
            phobos : `blur(${filterValue / 10}px)`,
            heat : `brightness(${filterValue + 50}%)`
        };
        evt.target.style.filter = 'none'; 
        previewImage.style.filter = filters[filter];
    }











































})();
"use strict";

;(function() {
    let comments = ['Всё отлично!', 
                    'В целом всё неплохо. Но не всё.', 
                    'Когда  вы  делаете  фотографию,  хорошо  бы  убирать  палец  из кадра. В конце концов это просто непрофессионально.', 
                    'Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.',
                    'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
                    'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент ? !'];
    let generatedPictures = [];

    // функция генерации рандомных комментариев

    function getRandomComments() {
        let count = window.keks.commons.getRandom(1, 2);
        let randomComments = [];
        for (let i = 0; i < count; i++) {
            randomComments.push(comments[window.keks.commons.getRandom(0, comments.length - 1)]);
        }
        return randomComments;
    }

    // функция генерации массива объектов с фотографиями

    function generatePictures() {
        for (let i = 0; i < 25; i++) {
            generatedPictures[i] = {
                url: `photos/${i + 1}.jpg`,
                likes: window.keks.commons.getRandom(15, 200),
                comments: getRandomComments()
            };
        }
    }

    let pictureTemplate = document.querySelector('#picture-template').content.querySelector('.picture');
    let picturesContainer = document.querySelector('.pictures');
    
    // функция создания объекта с фото; @pictureItem - элемент массива generatedPictures

    function createPictureObjects(pictureItem) {
        let pictureElement = pictureTemplate.cloneNode(true);
        pictureElement.querySelector('img').src = pictureItem.url;
        pictureElement.querySelector('.picture-likes').textContent = pictureItem.likes;
        pictureElement.querySelector('.picture-comments').textContent = pictureItem.comments.length;
        return pictureElement;
    }

    //функция отрисовки фото на страницы

    function renderPictures() {
        generatePictures();
        generatedPictures.sort(window.keks.commons.randomSort);
        let pictureFragment = document.createDocumentFragment();
        for (let i = 0; i < generatedPictures.length; i++) {
            let picture = createPictureObjects(generatedPictures[i]);
            pictureFragment.appendChild(picture);
        }
        picturesContainer.appendChild(pictureFragment);
    }

    renderPictures();

    let overlayPicture = document.querySelector('.gallery-overlay');
    let overlayImage = overlayPicture.querySelector('.gallery-overlay-image');
    let overlayLikes = overlayPicture.querySelector('.likes-count');
    let overlayComments = overlayPicture.querySelector('.comments-count');
    let closeButton = overlayPicture.querySelector('.gallery-overlay-close');
    closeButton.setAttribute('tabindex', 0);

    // функция открытия поп-апа с изображением; @evt = event

    function openPopup (evt) {
        evt.preventDefault();
        if (!evt.target.classList.contains('pictures')) {
             overlayImage.src = evt.target.parentNode.querySelector('img').src;
             overlayLikes.textContent = evt.target.parentNode.querySelector('.picture-likes').textContent;
             overlayComments.textContent = evt.target.parentNode.querySelector('.picture-comments').textContent;
             overlayPicture.classList.remove('hidden');
             document.addEventListener('keydown', closeOnEscPress);
             closeButton.addEventListener('click', closePopup);
             closeButton.addEventListener('keydown', closeOnEnterPress);
        }
    }

    // функция закрытия поп-апа с изображением; @evt = event

    function closePopup(evt) {
        evt.preventDefault();
        overlayPicture.classList.add('hidden');
        document.removeEventListener('keydown', closeOnEscPress);
        closeButton.removeEventListener('click', closePopup);
        closeButton.removeEventListener('keydown', closeOnEnterPress);
    }

    // функция закрытия поп-апа с изображением по нажатию Esc; @keyEvt = event

    function closeOnEscPress(keyEvt) {
        if (window.keks.commons.onEscPress(keyEvt)) {
            keyEvt.preventDefault();
            closePopup(keyEvt);
        }
    }

    // функция закрытия поп-апа с изображением по нажатию на крестик Enter'ом; @keyEvt = event

    function closeOnEnterPress(keyEvt) {
        if (window.keks.commons.onEnterPress(keyEvt)) {
            closePopup(keyEvt);
        }
    }

    picturesContainer.addEventListener('click', openPopup);
    
})();